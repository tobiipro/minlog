{"version":3,"sources":["../../src/listeners/log-to-console-aws-lambda.ts"],"names":[],"mappings":"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","file":"log-to-console-aws-lambda.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport fastSafeStringify from 'fast-safe-stringify';\n\nimport {\n  MinLogFormatArgs,\n  MinLogLevel,\n  MinLogListener\n} from '../types';\n\nimport {\n  jsonStringifyReplacer,\n  keepOnlyExtra\n} from '../util';\n\nimport {\n  logToConsole,\n  serialize as serializeLogToConsole,\n  toFormatArgs\n} from './log-to-console';\n\nimport {\n  Fn,\n  MaybePromise\n} from 'lodash-firecloud/types';\n\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface WriteStream {\n      _handle: import('stream').Pipe & {\n        setBlocking: (blocking: boolean) => void;\n      };\n    }\n  }\n}\n\ndeclare module '../types' {\n  interface MinLogEntry {\n    ctx?: {\n      awsRequestId?: string;\n    };\n  }\n}\n\nexport interface Cfg {\n\n  /**\n   * Any log entry less important that cfg.level is ignored.\n   */\n  level?: MinLogLevel;\n}\n\nlet _nonBreakingWhitespace = 'Â ';\n\nlet _isAwsLambda = function(): boolean {\n  let isNode = typeof process !== 'undefined' && _.isDefined(_.get(process, 'versions.node'));\n  if (!isNode) {\n    return false;\n  }\n\n  let isAwsLambda = _.isDefined(process.env.LAMBDA_TASK_ROOT);\n  if (!isAwsLambda) {\n    return false;\n  }\n\n  return true;\n};\n\nexport let format = function(...formatArgs: MinLogFormatArgs): void {\n  let [\n    format,\n    ...args\n  ] = formatArgs;\n\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  let chunk = require('util').format(format, ...args);\n  chunk = _.replace(chunk, /\\n/g, '\\r');\n  chunk = `${chunk}\\n`;\n  process.stdout.write(chunk);\n};\n\nexport let logToConsoleAwsLambda = function(cfg: MaybePromise<Cfg> | Fn<MaybePromise<Cfg>> = {}): MinLogListener {\n  if (!_isAwsLambda()) {\n    // use vanilla logger e.g. behind aws-lambda-proxy\n    return logToConsole(cfg);\n  }\n\n  // from https://github.com/Financial-Times/lambda-logger\n  // This does make process.stdout.write a blocking function (process.stdout._handle.setBlocking(true);),\n  // as AWS Lambda previously streamed to an output which was synchronous,\n  // but has since changed to asynchronous behaviour, leading to lost logs.\n\n  // remove eslint-disable-next-line after https://github.com/typescript-eslint/typescript-eslint/issues/1051\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (_.isFunction(process.stdout._handle?.setBlocking)) {\n    // @ts-ignore\n    process.stdout._handle.setBlocking(true);\n  }\n\n  // eslint-disable-next-line complexity\n  return async function({entry, logger, rawEntry}) {\n    cfg = _.isFunction(cfg) ? await cfg() : await cfg;\n\n    // handle https://github.com/tobiipro/babel-preset-firecloud#babel-plugin-firecloud-src-arg-default-config-needed\n    if (_.isDefined(rawEntry) &&\n        _.filter(rawEntry._args).length === 1 &&\n        _.isDefined(rawEntry._args[0]._babelSrc)) {\n      return;\n    }\n\n    if (_.isDefined(cfg.level) && logger.levelIsBeyondGroup(entry._level, cfg.level)) {\n      return;\n    }\n\n    let {\n      cfg: cfg2,\n      now,\n      formattedLevelName,\n      src,\n      msg\n    // @ts-ignore\n    } = serializeLogToConsole({entry, logger, rawEntry, cfg});\n    cfg = cfg2;\n\n    // use relative path, shorter output\n    src = _.replace(src, /\\/var\\/task\\//g, './');\n\n    // prefer JSON output over util.inspect output\n    let extra = _.omit(entry, [\n      '_args'\n    ]);\n    let extraStr = fastSafeStringify(extra, jsonStringifyReplacer, 2);\n    extraStr = `\\n${extraStr}`;\n\n    // maintain whitespace (looking at you AWS CloudWatch WebUI)\n    // by replacing space with non-breaking space\n    extraStr = _.replace(extraStr, / /g, _nonBreakingWhitespace);\n\n    let extraArgs = [\n      extraStr\n    ];\n\n    let formatPairs = [];\n\n    // timestamp\n    formatPairs.push([\n      '%s',\n      now\n    ]);\n\n    // awsRequestId\n    formatPairs.push([\n      '\\t%s',\n      // remove eslint-disable-next-line after https://github.com/typescript-eslint/typescript-eslint/issues/1051\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      _.defaultTo(entry.ctx?.awsRequestId, '-')\n    ]);\n\n    // level name\n    formatPairs.push([\n      '\\t%s',\n      formattedLevelName\n    ]);\n\n    // src\n    if (_.isDefined(src)) {\n      formatPairs.push([\n        '\\t%s',\n        src\n      ]);\n    }\n\n    // msg\n    // eslint-disable-next-line lodash/prop-shorthand\n    let argNames = _.keys(keepOnlyExtra(entry));\n    if (!_.isEmpty(argNames)) {\n      msg = `${msg} (${_.join(argNames, ', ')})`;\n    }\n    msg = `${msg} `;\n    msg = _.padEnd(msg, 255, _nonBreakingWhitespace);\n    msg = `${msg}.`;\n    formatPairs.push([\n      '\\n%s',\n      msg\n    ]);\n\n    let formatArgs = toFormatArgs(...formatPairs);\n    formatArgs.push(...extraArgs);\n\n    format(...formatArgs);\n  };\n};\n\nexport default logToConsoleAwsLambda;\n"]}